//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Pico.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PicoInputSimulator: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PicoInputSimulator()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Pico"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""fabf28e7-3318-4fdf-81b9-9e60f43f09b5"",
            ""actions"": [
                {
                    ""name"": ""Left Y"",
                    ""type"": ""Button"",
                    ""id"": ""938fe407-0912-4c98-8315-0c7adb38c589"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left X"",
                    ""type"": ""Button"",
                    ""id"": ""69239278-dabe-4d7e-90ce-14356d4e8e46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right B"",
                    ""type"": ""Button"",
                    ""id"": ""3679c48f-9547-4b9b-ad12-861fdf22d179"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right A"",
                    ""type"": ""Button"",
                    ""id"": ""579af055-4888-4104-a677-6d8c29d31b59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""19b81f67-a950-4612-ab09-85c3c8dd021e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""24b157a0-cc42-44cc-b898-bb64c1f6bb63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""200ccb35-2a75-4fb2-b577-1a8491bc12fd"",
                    ""path"": ""<PXR_Controller>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e38c52e1-95a6-4e95-807f-ac3fdbd5a6ed"",
                    ""path"": ""<PXR_Controller>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12e742b6-130b-4b84-902b-19d04c6f5f07"",
                    ""path"": ""<PXR_Controller>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27519b59-7e24-43e9-8b1a-8ef72d9e9caa"",
                    ""path"": ""<PXR_Controller>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""222cdf18-e0ac-4611-b8e2-e7ce482241a2"",
                    ""path"": ""<PXR_Controller>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""706f92eb-6a71-49d0-acb5-ec146399c236"",
                    ""path"": ""<PXR_Controller>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_LeftY = m_Control.FindAction("Left Y", throwIfNotFound: true);
        m_Control_LeftX = m_Control.FindAction("Left X", throwIfNotFound: true);
        m_Control_RightB = m_Control.FindAction("Right B", throwIfNotFound: true);
        m_Control_RightA = m_Control.FindAction("Right A", throwIfNotFound: true);
        m_Control_LeftTrigger = m_Control.FindAction("Left Trigger", throwIfNotFound: true);
        m_Control_RightTrigger = m_Control.FindAction("Right Trigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_Control_LeftY;
    private readonly InputAction m_Control_LeftX;
    private readonly InputAction m_Control_RightB;
    private readonly InputAction m_Control_RightA;
    private readonly InputAction m_Control_LeftTrigger;
    private readonly InputAction m_Control_RightTrigger;
    public struct ControlActions
    {
        private @PicoInputSimulator m_Wrapper;
        public ControlActions(@PicoInputSimulator wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftY => m_Wrapper.m_Control_LeftY;
        public InputAction @LeftX => m_Wrapper.m_Control_LeftX;
        public InputAction @RightB => m_Wrapper.m_Control_RightB;
        public InputAction @RightA => m_Wrapper.m_Control_RightA;
        public InputAction @LeftTrigger => m_Wrapper.m_Control_LeftTrigger;
        public InputAction @RightTrigger => m_Wrapper.m_Control_RightTrigger;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @LeftY.started += instance.OnLeftY;
            @LeftY.performed += instance.OnLeftY;
            @LeftY.canceled += instance.OnLeftY;
            @LeftX.started += instance.OnLeftX;
            @LeftX.performed += instance.OnLeftX;
            @LeftX.canceled += instance.OnLeftX;
            @RightB.started += instance.OnRightB;
            @RightB.performed += instance.OnRightB;
            @RightB.canceled += instance.OnRightB;
            @RightA.started += instance.OnRightA;
            @RightA.performed += instance.OnRightA;
            @RightA.canceled += instance.OnRightA;
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @LeftY.started -= instance.OnLeftY;
            @LeftY.performed -= instance.OnLeftY;
            @LeftY.canceled -= instance.OnLeftY;
            @LeftX.started -= instance.OnLeftX;
            @LeftX.performed -= instance.OnLeftX;
            @LeftX.canceled -= instance.OnLeftX;
            @RightB.started -= instance.OnRightB;
            @RightB.performed -= instance.OnRightB;
            @RightB.canceled -= instance.OnRightB;
            @RightA.started -= instance.OnRightA;
            @RightA.performed -= instance.OnRightA;
            @RightA.canceled -= instance.OnRightA;
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnLeftY(InputAction.CallbackContext context);
        void OnLeftX(InputAction.CallbackContext context);
        void OnRightB(InputAction.CallbackContext context);
        void OnRightA(InputAction.CallbackContext context);
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
    }
}
